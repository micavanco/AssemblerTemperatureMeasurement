
AVRASM ver. 2.2.6  C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm Fri Aug 31 21:45:33 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m644pdef.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(7): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m644Pdef.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(48): Including file 'C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\Delay.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(49): Including file 'C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\LCD.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(50): Including file 'C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\DS18B20.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m644pdef.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(7): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m644Pdef.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(48): Including file 'C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\Delay.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(49): Including file 'C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\LCD.inc'
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(50): Including file 'C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\DS18B20.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega644P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m644Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega644P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega644P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M644PDEF_INC_
                                 #define _M644PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega644P
                                 #pragma AVRPART ADMIN PART_NAME ATmega644P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x96
                                 .equ	SIGNATURE_002	= 0x0a
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 .equ	PCIE3	= 3	; Pin Change Interrupt Enable 3
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 .equ	PCIF3	= 3	; Pin Change Interrupt Flag 3
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0	; Pin Change Enable Mask 24
                                 .equ	PCINT25	= 1	; Pin Change Enable Mask 25
                                 .equ	PCINT26	= 2	; Pin Change Enable Mask 26
                                 .equ	PCINT27	= 3	; Pin Change Enable Mask 27
                                 .equ	PCINT28	= 4	; Pin Change Enable Mask 28
                                 .equ	PCINT29	= 5	; Pin Change Enable Mask 29
                                 .equ	PCINT30	= 6	; Pin Change Enable Mask 30
                                 .equ	PCINT31	= 7	; Pin Change Enable Mask 31
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 .equ	BODSE	= 5	; BOD Power Down in Sleep Enable
                                 .equ	BODS	= 6	; BOD Power Down in Sleep
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART 0
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4	; Power Reduction USART 1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x7fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x07ff
                                 .equ	EEPROMEND	= 0x07ff
                                 .equ	EEADRBITS	= 11
                                 #pragma AVRPART MEMORY PROG_FLASH 65536
                                 #pragma AVRPART MEMORY EEPROM 2048
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x7000
                                 .equ	NRWW_STOP_ADDR	= 0x7fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x6fff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x7e00
                                 .equ	SECONDBOOTSTART	= 0x7c00
                                 .equ	THIRDBOOTSTART	= 0x7800
                                 .equ	FOURTHBOOTSTART	= 0x7000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	PCI0addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x000c	; Pin Change Interrupt Request 2
                                 .equ	PCI3addr	= 0x000e	; Pin Change Interrupt Request 3
                                 .equ	WDTaddr	= 0x0010	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x0012	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0014	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x0016	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0018	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x001a	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001c	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001e	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x0020	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x0022	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x0024	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0026	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0028	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x002a	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x002c	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	ADCCaddr	= 0x0030	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0032	; EEPROM Ready
                                 .equ	TWIaddr	= 0x0034	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0036	; Store Program Memory Read
                                 .equ	URXC1addr	= 0x0038	; USART1 RX complete
                                 .equ	UDRE1addr	= 0x003a	; USART1 Data Register Empty
                                 .equ	UTXC1addr	= 0x003c	; USART1 TX complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 62	; size in words
                                 
                                 #endif  /* _M644PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; AssemblerTemperatureMeasurement.asm
                                 ;
                                 ; Created: 2018-07-05 23:56:52
                                 ; Author : MO
                                 
                                 .include "m644Pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega644P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m644Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega644P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega644P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M644PDEF_INC_
                                 #endif  /* _M644PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;-------------------------------------------
                                 ;    Declaring constants for LCD driver
                                 .EQU D_LCD	 = DDRA  ; register of direction LCD
                                 .EQU O_LCD   = PORTA ; output port register of LCD
                                 .EQU LCD_RS  = 0     ; number of RS  signal line
                                 .EQU LCD_EN  = 1     ; number of E   signal line
                                 .EQU LCD_DB4 = 4     ; number of DB4 signal line
                                 .EQU LCD_DB5 = 5     ; number of DB5 signal line
                                 .EQU LCD_DB6 = 6     ; number of DB6 signal line
                                 .EQU LCD_DB7 = 7     ; number of DB7 signal line
                                 
                                 ;-------------------------------------------
                                 ;    Declaring constants for DS18B20 driver
                                 .EQU D_TEMP	 = DDRD  ; register of direction DS18B20
                                 .EQU O_TEMP  = PORTD ; output port register of DS18B20
                                 .EQU TEMP_DQ = PD6   ; number of DQ data line
                                 .EQU TEMP_PIN= PIND
                                 
                                 
                                 .DEF DATA_TO_SEND = R16
                                 .DEF DELAY_TIME   = R17
                                 .DEF DELAY_MUL    = R18
                                 .DEF RED_LED      = R23			; defining variables
                                 .DEF GREEN_LED    = R20
                                 .DEF BLUE_LED     = R21
                                 .DEF counter      = R22
                                 
                                 .DSEG
                                 .ORG 0x100
000100                           	_crc:			.BYTE 1
000101                           	SerialNumber:	.BYTE 8
                                 
                                 .CSEG 
000000 940c 0166                 .org 0 jmp start
000020 940c 01d7                 .org OC0Aaddr jmp Tim0_compA  ; Overflow0 Interrupt Vector Address
                                 .org 0x30					  ; jump to first section after interrupt vectors
                                 
                                 ;---------------------------------------------------------
                                 ;     Include external files
                                 .INCLUDE "Delay.inc"	; Delay functions
                                 
                                  * Delay.inc
                                  *
                                  *  Created: 2018-07-12 17:32:43
                                  *   Author: MO
                                  */ 
                                  ;---------------------------------------------------------
                                 ;     Delay functions
                                 ;	Delay in ms
                                 delay_ms:
000030 933f                      	push R19				;push values to stack
000031 934f                      	push R20
000032 935f                      	push R21
000033 936f                      	push R22
                                 
000034 2f32                      	mov R19, DELAY_MUL		;copy value to register
000035 2f41                      	mov R20, DELAY_TIME
000036 e150                      	ldi R21, 16
                                 
                                 Wait_ms_0:				;_______________________
000037 2f23                      	mov DELAY_MUL, R19	;			loop 0		\
                                 Wait_ms_1:				;__________________		|
000038 2f14                      	mov DELAY_TIME, R20 ;			loop 1	\	|
                                 Wait_ms_2:				;_______________	|	|
000039 ef69                      	ldi R22, 249		;		loop 2	\	|	|
00003a 0000                      	nop					;				|	|	|
                                 Wait_ms_3:				;______			|	|	|
00003b 0000                      	nop					;loop 3	\		|	|	|
00003c 956a                      	dec R22				;		/		|	|	|
00003d f7e9                      	brne Wait_ms_3		;______/		|	|	|
00003e 951a                          dec DELAY_TIME		;				/	|	|	
00003f f7c9                      	brne Wait_ms_2		;______________/	|	|
000040 952a                      	dec DELAY_MUL		;				   /	|
000041 f7b1                      	brne Wait_ms_1		;_________________/		|
000042 955a                      	dec R21				;						/
000043 f799                      	brne Wait_ms_0		;______________________/
                                 
000044 916f                      	pop R22
000045 915f                      	pop R21					;get values from stack 
000046 914f                      	pop R20
000047 913f                      	pop R19
000048 9508                      ret
                                 ; Delay in us
                                 delay_us:
000049 934f                      	push R20				;push values to stack
00004a 935f                      	push R21
                                 		
00004b 2f41                      	mov R20, DELAY_TIME		;copy value to register
00004c e150                      	ldi R21, 16
                                 
                                 Wait_us_0:				;_______________________
00004d 2f14                      	mov DELAY_TIME, R20 ;			loop 0		\
                                 Wait_us_1:				;__________________		|
00004e 0000                      	nop					;				   |	|
00004f 0000                      	nop					;				   |	|
000050 0000                      	nop					;				   |	|
000051 0000                      	nop					;				   |	|
000052 0000                      	nop					;				   |	|
000053 0000                      	nop					;				   |	|
000054 0000                      	nop					;			loop 1 |	|	
000055 951a                      	dec DELAY_TIME		;				   /	|
000056 f7b9                      	brne Wait_us_1		;_________________/		|
000057 955a                      	dec R21				;						/
000058 f7a1                      	brne Wait_us_0		;______________________/
                                 			
000059 915f                      	pop R21			;get values from stack 
00005a 914f                      	pop R20
                                 .INCLUDE "LCD.inc"		; LCD functions
00005b 9508                      
                                  * LCD.inc
                                  *
                                  *  Created: 2018-07-12 17:31:48
                                  *   Author: MO
                                  */ 
                                  ;---------------------------------------------------------
                                  ;	Declaring labels for driver instructions
                                  .equ LCD_CLEAR		= 0 ; clear screen and cursor return
                                  .equ LCD_BACK		= 1 ; return cursor to first position
                                 
                                  .equ LCD_MODE		= 2 ; change memory save mode
                                  .equ LCD_T_INC		= 1 ; increment address after save
                                  .equ LCD_T_DEC		= 2 ; decrement address after save
                                  .equ LCD_T_MOVE	= 0 ; move screen after every saving
                                 
                                  .equ LCD_CTRL		= 3 ; control screen
                                  .equ LCD_SW_ON		= 2 ; switch on screen
                                  .equ LCD_SW_OFF	= 3 ; switch off screen
                                  .equ LCD_SK_ON		= 1 ; switch on cursor
                                  .equ LCD_SK_OFF	= 3 ; switch off cursor
                                  .equ LCD_SM_ON		= 0 ; set on cursor blinking
                                  .equ LCD_SM_OFF	= 3 ; set off cursor blinking
                                 
                                  .equ LCD_MOVE		= 4 ; moving
                                  .equ LCD_C_MOVE	= 4 ; move cursor
                                  .equ LCD_S_MOVE	= 3 ; move screen
                                  .equ LCD_LEFT		= 4 ; move left
                                  .equ LCD_RIGHT		= 2 ; move right
                                 
                                  .equ LCD_SET		= 5 ; set interface and screen
                                  .equ LCD_SET_8BIT	= 4 ; 8-Bit interface
                                  .equ LCD_SET_4BIT	= 5 ; 4-Bit interface
                                  .equ LCD_SET_2LINE	= 3 ; 2-line screen
                                  .equ LCD_SET_1LINE = 5 ; 1-line screen
                                  .equ LCD_SET_5x10  = 2 ; 5x10 marks size
                                  .equ LCD_SET_5x8   = 5 ; 5x8  marks size
                                 
                                  .equ LCD_CGADR		= 6 ; change CGRAM address
                                  .equ LCD_DDADR		= 7 ; change DDRAM address
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to initialize LCD screen
                                 
                                 Ini_LCD:
00005c 930f                      	push DATA_TO_SEND		; put value on stack
00005d 932f                      	push DELAY_MUL			; put value on stack
00005e 931f                      	push DELAY_TIME
                                 
00005f 9a08                      	sbi D_LCD, LCD_RS		; set bit RS and so on
000060 9a09                      	sbi D_LCD, LCD_EN
000061 9a0c                      	sbi D_LCD, LCD_DB4
000062 9a0d                      	sbi D_LCD, LCD_DB5
000063 9a0e                      	sbi D_LCD, LCD_DB6
000064 9a0f                      	sbi D_LCD, LCD_DB7
                                 
000065 9810                      	cbi O_LCD, LCD_RS		; clear bit RS and EN (send instructions)
000066 9811                      	cbi O_LCD, LCD_EN
                                 
000067 e21d                      	ldi DELAY_TIME, 45
000068 e021                      	ldi DELAY_MUL, 1
000069 dfc6                      	rcall delay_ms			; wait 45 ms
                                 
                                 		
00006a 9a11                      	sbi O_LCD, LCD_EN    ; set bit E and so on
00006b 9a14                      	sbi O_LCD, LCD_DB4
00006c 9a15                      	sbi O_LCD, LCD_DB5
00006d 9816                      	cbi O_LCD, LCD_DB6
00006e 9817                      	cbi O_LCD, LCD_DB7
00006f 0000                      	nop
000070 0000                      	nop
000071 9811                      	cbi O_LCD, LCD_EN
                                 
000072 e015                      	ldi DELAY_TIME, 5
000073 e021                      	ldi DELAY_MUL, 1
000074 dfbb                      	rcall delay_ms			; wait 5 ms
                                 
000075 e022                      	ldi DELAY_MUL, 2
                                 	Ini_LCD_1:
000076 9a11                      	sbi O_LCD, LCD_EN
000077 e011                      	ldi DELAY_TIME, 1
000078 dfd0                      	rcall delay_us			; wait 1 us
000079 9811                      	cbi O_LCD, LCD_EN
00007a e114                      	ldi DELAY_TIME, 20
00007b dfcd                      	rcall delay_us			; wait 20 us
00007c 952a                      	dec DELAY_MUL
00007d f7c1                      	brne Ini_LCD_1			; if not equal 0 move to Ini_LCD_1
                                 
00007e 9a11                      	sbi O_LCD, LCD_EN
00007f 9814                      	cbi O_LCD, LCD_DB4
000080 e011                      	ldi DELAY_TIME, 1
000081 dfc7                      	rcall delay_us			; wait 1 us
000082 9811                      	cbi O_LCD, LCD_EN
000083 e01a                      	ldi DELAY_TIME, 10
000084 dfc4                      	rcall delay_us			; wait 10 us
                                 
000085 e208                      	ldi DATA_TO_SEND, (1<<LCD_SET)|(1<<LCD_SET_4BIT)|(1<<LCD_SET_2LINE)|(1<<LCD_SET_5x8)
000086 d00a                      	rcall instruction_LCD
                                 
000087 e006                      	ldi DATA_TO_SEND, (1<<LCD_MODE)|(1<<LCD_T_INC)
000088 d008                      	rcall instruction_LCD
                                 
000089 e00c                      	ldi DATA_TO_SEND, (1<<LCD_CTRL)|(1<<LCD_SW_ON)|(1<<LCD_SK_OFF)|(1<<LCD_SM_OFF)
00008a d006                      	rcall instruction_LCD
                                 
00008b 9a10                      	sbi O_LCD, LCD_RS
                                 
00008c d02b                      	rcall clear_LCD
                                 
00008d 911f                      	pop DELAY_TIME
00008e 912f                      	pop DELAY_MUL			; take value from stack
00008f 910f                      	pop DATA_TO_SEND		; take value from stack
000090 9508                      	ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to send instruction to LCD
                                 instruction_LCD:
000091 9810                      	cbi O_LCD, LCD_RS	;clear RS bit/sending values are instructions
000092 d002                      	rcall send_to_LCD
000093 9a10                      	sbi O_LCD, LCD_RS	;set RS bit/sending values are data
000094 9508                      	ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to send byte to LCD
                                 send_to_LCD:
000095 9a11                      	sbi O_LCD, LCD_EN	;set bit EN
000096 9814                      	cbi	O_LCD, LCD_DB4	;clear bit DB4
000097 9815                      	cbi	O_LCD, LCD_DB5
000098 9816                      	cbi	O_LCD, LCD_DB6
000099 9817                      	cbi	O_LCD, LCD_DB7
00009a fd07                      	sbrc DATA_TO_SEND, 7
00009b 9a17                      	sbi	O_LCD, LCD_DB7	;do this instruction if bit 7 is set
00009c fd06                      	sbrc DATA_TO_SEND, 6
00009d 9a16                      	sbi	O_LCD, LCD_DB6	;do this instruction if bit 6 is set
00009e fd05                      	sbrc DATA_TO_SEND, 5
00009f 9a15                      	sbi	O_LCD, LCD_DB5	;do this instruction if bit 5 is set
0000a0 fd04                      	sbrc DATA_TO_SEND, 4
0000a1 9a14                      	sbi	O_LCD, LCD_DB4	;do this instruction if bit 4 is set
                                 
0000a2 0000                      	nop
                                 
0000a3 9811                      	cbi O_LCD, LCD_EN	;set EN to low - send first half byte
                                 
0000a4 0000                      	nop
0000a5 0000                      	nop
                                 
0000a6 9a11                      	sbi O_LCD, LCD_EN	;set bit EN
0000a7 9814                      	cbi	O_LCD, LCD_DB4	;clear bit DB4
0000a8 9815                      	cbi	O_LCD, LCD_DB5
0000a9 9816                      	cbi	O_LCD, LCD_DB6
0000aa 9817                      	cbi	O_LCD, LCD_DB7
0000ab fd03                      	sbrc DATA_TO_SEND, 3
0000ac 9a17                      	sbi	O_LCD, LCD_DB7	;do this instruction if bit 7 is set
0000ad fd02                      	sbrc DATA_TO_SEND, 2
0000ae 9a16                      	sbi	O_LCD, LCD_DB6	;do this instruction if bit 6 is set
0000af fd01                      	sbrc DATA_TO_SEND, 1
0000b0 9a15                      	sbi	O_LCD, LCD_DB5	;do this instruction if bit 5 is set
0000b1 fd00                      	sbrc DATA_TO_SEND, 0
0000b2 9a14                      	sbi	O_LCD, LCD_DB4	;do this instruction if bit 4 is set
                                 
0000b3 0000                      	nop
                                 
0000b4 9811                      	cbi O_LCD, LCD_EN	;set EN to low - send second half byte
                                 
0000b5 e015                      	ldi DELAY_TIME, 5	;set delay time to 5us
0000b6 df92                      	rcall delay_us
0000b7 9508                      ret
                                 
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to clear LCD screen
                                 clear_LCD:
0000b8 930f                      	push DATA_TO_SEND				; put value on stack
0000b9 e001                      	ldi DATA_TO_SEND, (1<<LCD_CLEAR)
0000ba dfd6                      	rcall instruction_LCD			; clear screen and return cursor to first position
                                 
0000bb eb04                      	ldi DATA_TO_SEND, 180
0000bc df8c                      	rcall delay_us					; delay 1,8 ms
0000bd 910f                      	pop DATA_TO_SEND				; take value from stack
0000be 9508                      	ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to return cursor on LCD screen
                                 return_cursor:
0000bf 930f                      	push DATA_TO_SEND				; put value on stack
0000c0 931f                      	push DELAY_TIME
0000c1 e002                      	ldi  DATA_TO_SEND, (1<<LCD_BACK); return cursor to first position
0000c2 dfce                      	rcall instruction_LCD
0000c3 eb14                      	ldi DELAY_TIME, 180
0000c4 df84                      	rcall delay_us					; delay 1,8 ms
0000c5 911f                      	pop DELAY_TIME
0000c6 910f                      	pop DATA_TO_SEND				; take value from stack
0000c7 9508                      	ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to display char string
                                 .equ END_OF_STRING = 255	; label of end of string
                                 
                                 display_string_LCD:
                                 	
0000c8 930f                      	push DATA_TO_SEND		; put value on stack
0000c9 933f                      	push R19				; put value on stack
                                 
                                 	loop_dsp_1:
0000ca 9105                      	lpm DATA_TO_SEND, Z+	; load data from address pointer Z and increment address
                                 
0000cb 3f0f                      	cpi DATA_TO_SEND, END_OF_STRING
0000cc f011                      	breq end_dsp_loop			; if this mark is END_OF_STRING mark, end loop
0000cd dfc7                      	rcall send_to_LCD
0000ce cffb                      	rjmp loop_dsp_1
                                 
                                 	end_dsp_loop:
0000cf 913f                      	pop R19					; take value from stack
0000d0 910f                      	pop DATA_TO_SEND		; take value from stack
0000d1 9508                      	ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to display decimal number
                                 
                                 show_dec_LCD:
0000d2 933f                      	push R19				; put value on stack
                                 
0000d3 2f30                      	mov R19, DATA_TO_SEND
0000d4 94e8                      	clt						; clear bit register T 
                                 
0000d5 2700                      	clr DATA_TO_SEND		; clear register
                                 	loop_show_1:
0000d6 5634                      	subi R19, 100			; subtract 100
0000d7 f010                      	brlo loop_show_2		; branch if value is than zero
0000d8 9503                      	inc DATA_TO_SEND
0000d9 cffc                      	rjmp loop_show_1
                                 
                                 	loop_show_2:
0000da 593c                      	subi R19, -100			; add 100
0000db 2300                      	tst DATA_TO_SEND
0000dc f021                      	breq loop_show_3
0000dd 9468                      	set						; if DATA_TO_SEND is higher than 0, set bit register T 
0000de 6300                      	ori DATA_TO_SEND, 0b00110000 ; convert to ASCII
0000df dfb5                      	rcall send_to_LCD		; and display on LCD screen
                                 	
0000e0 2700                      	clr DATA_TO_SEND
                                 	loop_show_3:
0000e1 503a                      	subi R19, 10
0000e2 f010                      	brlo loop_show_4
0000e3 9503                      	inc DATA_TO_SEND
0000e4 cffc                      	rjmp loop_show_3
                                 
                                 	loop_show_4:
0000e5 5f36                      	subi R19, -10
0000e6 2300                      	tst DATA_TO_SEND
0000e7 f409                      	brne loop_show_5		; if number of tens is equal to zero go to loop_show_5
0000e8 f419                      	brne loop_show_6		; if bit register T was clear
                                 
                                 	loop_show_5:
0000e9 9468                      	set
0000ea 6300                      	ori DATA_TO_SEND, 0b00110000 ; convert to ASCII
0000eb dfa9                      	rcall send_to_LCD		; and display on LCD screen
                                 
                                 	loop_show_6:
0000ec 2f03                      	mov DATA_TO_SEND, R19
0000ed 6300                      	ori DATA_TO_SEND, 0b00110000 ; convert to ASCII
0000ee dfa6                      	rcall send_to_LCD		; and display on LCD screen
                                 
0000ef 913f                      	pop R19					; take value from stack
0000f0 9508                      	ret	 
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to add spaces to display 
                                 
                                 add_space_LCD:
0000f1 933f                      	push R19
                                 
0000f2 2f30                      	mov R19, DATA_TO_SEND	; copy number of spaces
                                 
                                 	add_space_LCD_1:
0000f3 e230                      	ldi R19, ' '			; load ASCII "space" symbol
0000f4 dfa0                      	rcall send_to_LCD		; and display on LCD screen
0000f5 953a                      	dec R19
0000f6 f7e1                      	brne add_space_LCD_1	; if not equal to zero go to add_space_LCD_1
                                 
0000f7 913f                      	pop R19
0000f8 9508                      	ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Function to copy constant values to CGRAM memory
                                 
                                 ;save_to_CGRAM:
                                 	;push DATA_TO_SEND		; put value on stack
                                 	;push R19				; put value on stack
                                 														;*********in progress*************
                                 	;ldi DATA_TO_SEND, 0|(1<<LCD_CGADR)
                                 	;rcall instruction_LCD	; set CGADR address mode and set 0 address in that memory
                                 
                                 	;ldi 
                                 
                                 .INCLUDE "DS18B20.inc"	; Sensor functions
                                 
                                  * DS18B20.inc
                                  *
                                  *  Created: 2018-07-17 19:16:33
                                  *   Author: MO
                                  */ 
                                  ;---------------------------------------------------------
                                 ;     Constant definitions
                                 	.EQU	SYS_FREQ	 = 16000000
                                 
                                 	.EQU	READROM		 = 0x33		; read rom command
                                 	.EQU	ROMCODE		 = 1
                                 ;---------------------------------------------------------
                                 ;     Initializing of sensor
                                 ;		D_TEMP			register of direction DS18B20
                                 ;		O_TEMP  = PORTD output port register of DS18B20
                                 ;		TEMP_DQ = 6     number of DQ data line
                                 ;		TEMP_PIN		PIN of used port
                                 ;
                                  DS18B20_Reset:
0000f9 931f                      	push DELAY_TIME
                                 
0000fa 9a56                      	sbi	D_TEMP, TEMP_DQ
0000fb 985e                      	cbi O_TEMP, TEMP_DQ
                                 
0000fc ef10                      	ldi DELAY_TIME, 240
0000fd df4b                      	rcall delay_us
0000fe df4a                      	rcall delay_us			; wait 480 us
                                 
0000ff 9856                      	cbi	D_TEMP, TEMP_DQ
                                 
000100 e416                      	ldi DELAY_TIME, 70
000101 df47                      	rcall delay_us			; wait 70 us
000102 9468                      	set
000103 9b4e                      	sbis TEMP_PIN, TEMP_DQ
000104 94e8                      	clt
000105 ef10                      	ldi DELAY_TIME, 240
000106 df42                      	rcall delay_us			; wait 240 us
                                 
000107 911f                      	pop DELAY_TIME
000108 9508                      ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Send bit to sensor
                                 ;		D_TEMP			register of direction DS18B20
                                 ;		O_TEMP			output port register of DS18B20
                                 ;		TEMP_DQ			number of DQ data line
                                 ;					
                                 DS18B20_Send_Bit:
000109 931f                      	push DELAY_TIME
                                 
00010a f410                      	brcc Send_Bit_Zero
00010b e011                      	ldi DELAY_TIME, 1
00010c c001                      	rjmp Send_Bit_One
                                 	Send_Bit_Zero:
00010d e718                      	ldi DELAY_TIME, 120
                                 	Send_Bit_One:
00010e 9a56                      	sbi	D_TEMP, TEMP_DQ
00010f df39                      	rcall delay_us
000110 9856                      	cbi	D_TEMP, TEMP_DQ
                                 
000111 e31c                      	ldi DELAY_TIME, 60
000112 df36                      	rcall delay_us			; wait 60 us
                                 
000113 911f                      	pop DELAY_TIME
000114 9508                      ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Send byte to sensor
                                 ;		D_TEMP			register of direction DS18B20
                                 ;		O_TEMP			output port register of DS18B20
                                 ;		TEMP_DQ			number of DQ data line
                                 ;		DATA_TO_SEND	byte to write
                                 ;		R24				counter			
                                 DS18B20_Send_Byte:
000115 938f                      	push R24
                                 
000116 e080                      	ldi R24, 0
                                 	DS18B20_Send_Byte_loop:			;______
000117 9507                      	ror DATA_TO_SEND				;	   \
000118 dff0                      	rcall DS18B20_Send_Bit			;		|
000119 9583                      	inc R24							; loop	|
00011a 3088                      	cpi R24, 8						;		/
00011b f7d9                      	brne DS18B20_Send_Byte_loop		;______/
                                 
00011c 918f                      	pop R24
00011d 9508                      ret
                                 
                                 
                                 ;---------------------------------------------------------
                                 ;     Read bit from sensor
                                 ;		D_TEMP			register of direction DS18B20
                                 ;		O_TEMP			output port register of DS18B20
                                 ;		TEMP_DQ			number of DQ data line
                                 ;					
                                 DS18B20_Read_Bit:
00011e 931f                      	push DELAY_TIME
                                 	
00011f e011                      	ldi DELAY_TIME, 1
000120 9a56                      	sbi	D_TEMP, TEMP_DQ
000121 df27                      	rcall delay_us			; wait 1 us
000122 9856                      	cbi	D_TEMP, TEMP_DQ
000123 e015                      	ldi DELAY_TIME, 5
000124 df24                      	rcall delay_us			; wait 5 us
000125 94e8                      	clt
000126 994e                      	sbic TEMP_PIN, TEMP_DQ
000127 9468                      	set
000128 e312                      	ldi DELAY_TIME, 50
000129 df1f                      	rcall delay_us			; wait 50 us
00012a 9408                      	sec
00012b f00e                      	brts DS18B20_Read_Bit_End
00012c 9488                      	clc
                                 	DS18B20_Read_Bit_End:
00012d 911f                      	pop DELAY_TIME
00012e 9508                      ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Read byte from sensor
                                 ;		D_TEMP			register of direction DS18B20
                                 ;		O_TEMP			output port register of DS18B20
                                 ;		TEMP_DQ			number of DQ data line
                                 ;		DATA_TO_SEND	byte to read
                                 ;		R24				counter			
                                 DS18B20_Read_Byte:
00012f 938f                      	push R24
                                 
000130 e080                      	ldi R24, 0
                                 	DS18B20_Read_Byte_loop:			;______
000131 dfec                      	rcall DS18B20_Read_Bit			;	   \
000132 9507                      	ror DATA_TO_SEND				;	    |		
000133 9583                      	inc R24							; loop	|
000134 3088                      	cpi R24, 8						;		/
000135 f7d9                      	brne DS18B20_Read_Byte_loop		;______/
                                 
000136 918f                      	pop R24
000137 9508                      ret
                                 ;---------------------------------------------------------
                                 ;     Update CRC value
                                 ;			
                                 CRC8Update:
000138 934f                      	  push	R20
000139 935f                      	  push	R21
00013a 936f                      	  push	R22
00013b 934f                      	  push	R20
                                 
00013c e058                      	  ldi	R21, 8
                                 	CRC8L:
00013d 9160 0100                 	  lds	R22, _crc
00013f 2746                      	  eor	R20, r22
000140 9547                      	  ror	R20
000141 9140 0100                 	  lds	R20, _crc
000143 f410                      	  brcc	CRC8zero
000144 e168                      	  ldi	R22, 0x18
000145 2746                      	  eor	R20, R22
                                 	CRC8zero:
000146 9547                      	  ror	R20
000147 9340 0100                 	  sts	_crc, R20
000149 914f                      	  pop	R20
00014a 9546                      	  lsr	R20
00014b 934f                      	  push	R20
00014c 955a                      	  dec	r21
00014d f779                      	  brne	CRC8L
00014e 914f                      	  pop	r20
00014f 916f                      	  pop	r22
000150 915f                      	  pop	r21
000151 914f                      	  pop	r20
000152 9508                       ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Clear CRC value
                                 ;	
                                 CRC8Init:
000153 930f                      		push R16
000154 e000                      		ldi	R16, 0
000155 9300 0100                 		sts	_crc, R16
000157 910f                      		pop	R16
000158 9508                      ret
                                 
                                 ;---------------------------------------------------------
                                 ;     Get CRC value
                                 ;		DATA_TO_SEND	byte to read
                                 ;
                                 GetCRC8:
000159 9100 0100                   lds	DATA_TO_SEND, _crc 
00015b 9508                      
                                 
00015c 6554
00015d 706d
00015e 7265
00015f 7461
000160 7275
000161 2065
C:\Users\MO\Documents\Embedded_C_projects\AssemblerTemperatureMeasurement\AssemblerTemperatureMeasurement\main.asm(53): warning: .cseg .db misalignment - padding zero byte
000162 00ff                      Text:	.db "Temperature ", END_OF_STRING ; declaring const string in program memory
000163 7245
000164 6f72
000165 ff72                      ERR:	.db	"Error", END_OF_STRING
                                 
                                 start:
000166 94f8                      cli					; disable interrupts 
                                 
000167 ec68                      ldi counter, 200
000168 e072                      ldi RED_LED, 2	
000169 e022                      ldi DELAY_MUL, 2
00016a e015                      ldi DELAY_TIME, 5	
                                 
00016b e110                      ldi R17, high(RAMEND) ; initialization of stack pointer
00016c ef0f                      ldi R16, low(RAMEND)
00016d bf1e                      out SPH, R17
00016e bf0d                      out SPL, R16
                                 
00016f deec                      rcall Ini_LCD		; initialization of LCD
                                 
000170 e0f2                      ldi ZH, high(Text<<1)	; load address of first character to pointer
000171 ebe8                      ldi ZL, low(Text<<1)
000172 df55                      rcall display_string_LCD
                                 
000173 2700                      clr R16
000174 9100 00b0                 lds R16, TCCR2A		; load address of TCCR2A to R16
000176 6c03                      ORI R16, (1<<COM2A1)|(1<<COM2A0)|(1<<WGM20)|(1<<WGM21) ; load data to R16 (logical OR operation), set OC2A on Compare Match, clear OC2A at BOTTOM (inverting mode) fastPWM
000177 9300 00b0                 sts TCCR2A, R16		; store direct to data space I/O from R16
                                 
000179 9100 00b1                 lds R16, TCCR2B		; load address of TCCR2B to R16
00017b 6001                      ORI R16, (1<<CS20)	; load to R16 data (logical OR operation), set (No prescaling)
00017c 9300 00b1                 sts TCCR2B, R16		; store direct to data space I/O from R16
                                 
00017e 9100 00b3                 lds R16, OCR2A		; load address of OCR2A to R16
000180 2f07                      mov R16, RED_LED	; load value to R16
000181 9300 00b3                 sts OCR2A, R16		; store direct to data space from R16
                                 
000183 ec02                      ldi R16, (1<<COM0A1)|(1<<COM0A0)|(1<<WGM01) ; set compare output mode, clear OC0A at BOTTOM (inverting mode) CTC
000184 bd04                      out TCCR0A, R16
000185 e002                      ldi R16, (1<<CS01)	; set /8 (From prescaler)
000186 bd05                      out TCCR0B, R16
000187 ec08                      ldi R16, 200
000188 bd07                      out OCR0A, R16
000189 9100 006e                 lds R16, TIMSK0		; load address of TIMSK0 to R16
00018b 6002                      ORI R16, (1<<OCIE0A); load to R16 data (logical OR operation), set interrupt on compare enable
00018c 9300 006e                 sts TIMSK0, R16		; store direct to data space from R16
                                 
                                 ;sbi DDRC, DDC2		; set Data Direct Register as a input
                                 ;sbi DDRC, DDC1		; set Data Direct Register as a input
00018e 9a57                      sbi DDRD, DDD7
00018f 9a50                      sbi DDRD, (0<<DDD5) ; set Data Direct Register as a output (connected button)
                                 
000190 e006                      ldi R16, (1<<PINC1)|(1<<PINC2) ; set Port as a output
000191 b908                      out PORTC, R16 
000192 e200                      ldi R16, (0<<PIND7)|(1<<PIND5) ; pull-up internal resistor in PIND6
000193 b90b                      out PORTD, R16 
000194 9478                      sei					; enable interrupts 
                                 
                                 ;*************************************************
                                 main:				; main loop
000195 e614                      ldi DELAY_TIME, 100
000196 e021                      ldi DELAY_MUL, 1
000197 940e 0030                 call delay_ms
000199 994d                      sbic PIND, PIND5	; wait for pushed button (if PIND6 is clear, skip next instruction)
00019a cffa                      rjmp main
00019b 0000                      nop
                                 
00019c e006                      ldi DATA_TO_SEND, 6
00019d df34                      rcall show_dec_LCD
                                 
                                 DS18B20:
00019e df5a                      rcall DS18B20_Reset
00019f f3f6                      brts  DS18B20
                                 
0001a0 e303                      ldi DATA_TO_SEND, READROM
0001a1 df73                      rcall DS18B20_Send_Byte
                                 
0001a2 dfb0                      rcall	CRC8Init
                                 
0001a3 df8b                      rcall DS18B20_Read_Byte
0001a4 3000                      cpi DATA_TO_SEND, 0
0001a5 f169                      breq error
                                 
0001a6 df91                      rcall CRC8Update
                                 
0001a7 e0c1                      ldi   YL, LOW(SerialNumber)	    
0001a8 e0d1                      ldi	  YH, HIGH(SerialNumber)	; Load to Y address of SerialNumber table
                                 
0001a9 9309                      st	   Y+, DATA_TO_SEND	
                                 
0001aa e087                      ldi R24, 7
                                 Storeloop:
0001ab df83                      rcall DS18B20_Read_Byte
0001ac df8b                      rcall CRC8Update
0001ad 9309                      st	   Y+, DATA_TO_SEND	          ; store next byte to table, and increment pointer
0001ae 958a                      dec	  R24	                      ; decrement loop counter
0001af f7d9                      brne  StoreLoop					  ; if greater than zero, jump to StoreLoop
                                 
0001b0 dfa8                      rcall	GetCRC8	                  ; Read computed CRC8
0001b1 3000                      cpi		DATA_TO_SEND, 0	          ; copmare it with zero
0001b2 f501                      brne	error	                  ; if not equal, jump to MainLoop (bad CRC)
                                 
                                 
0001b3 e0f2                      ldi ZH, high(ERR<<1)	; load address of first character to pointer
0001b4 ece6                      ldi ZL, low(ERR<<1)
0001b5 df12                      rcall display_string_LCD
                                 
0001b6 ea08                      ldi DATA_TO_SEND, 40|(1<<LCD_DDADR)
0001b7 ded9                      rcall instruction_LCD
                                 
                                 
0001b8 e088                      ldi	  R24, 8	                   ; 8 digits to display
0001b9 e0c1                      ldi   YL, LOW(SerialNumber)	    
0001ba e0d1                      ldi	  YH, HIGH(SerialNumber)	   ; Load to Z address of SerialNumber table
                                 LoadLoop:
0001bb 9109                      ld	  DATA_TO_SEND, Y+
0001bc df15                      rcall show_dec_LCD
0001bd 958a                      dec		R24	                       ; decrement loop conouter
0001be f7e1                      brne	LoadLoop	               ; if not zero, jump to LoadLoop
                                 
0001bf 9573                      inc RED_LED			; increment value
0001c0 3f7c                      cpi	RED_LED, 252	; if R18 equals or higher 252 do next command
0001c1 f458                      brsh toone
0001c2 9180 00b3                 lds R24, OCR2A		; load address of OCR2A to R16
0001c4 2f87                      mov R24, RED_LED	; load value to R16
0001c5 9380 00b3                 sts OCR2A, R24		; store direct to data space from R16
0001c7 0000                      nop 
0001c8 e114                      ldi DELAY_TIME, 20
0001c9 e021                      ldi DELAY_MUL, 1
0001ca 940e 0030                 call delay_ms
0001cc cfc8                      rjmp main
                                 toone: 
0001cd e071                      ldi RED_LED, 1
0001ce e01f                      ldi DELAY_TIME, 15
0001cf e021                      ldi DELAY_MUL, 1
0001d0 940e 0030                 call delay_ms
0001d2 cfc2                      rjmp main
                                 ;*************************************************		
                                 error:
0001d3 e0f2                      ldi ZH, high(ERR<<1)	; load address of first character to pointer
0001d4 ece6                      ldi ZL, low(ERR<<1)
0001d5 def2                      rcall display_string_LCD
0001d6 cfbe                      rjmp main
                                 ;---------------------------------------------------------
                                 ;     Interrupt functions
                                 
                                 Tim0_compA:
0001d7 932f                      push R18
0001d8 956a                      dec counter			; decrement value
0001d9 3061                      cpi counter, 1		
0001da f040                      brlo zero			; if value counter lower than 1 go to zero
0001db 1767                      cp counter, RED_LED
0001dc f418                      brsh off			; if value of register R18 higher or same go to off
0001dd e026                      ldi R18, (1<<PINC1)|(1<<PINC2) ;set Port as a input
0001de b928                      out PORTC, R18
0001df c004                      rjmp back
                                 off:
0001e0 e020                      ldi R18, (0<<PINC1)|(0<<PINC2) ; set Port as a output
0001e1 b928                      out PORTC, R18 
0001e2 c001                      rjmp back
                                 zero:
0001e3 ec68                      ldi counter, 200
                                 back:
0001e4 912f                      pop R18
0001e5 9518                      reti				; return from interrupt 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega644P" register use summary:
x  :   0 y  :   3 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  76 r17:  39 r18:  19 r19:  19 r20:  21 
r21:  12 r22:  15 r23:   7 r24:  17 r25:   0 r26:   0 r27:   0 r28:   2 
r29:   2 r30:   3 r31:   3 
Registers used: 15 out of 35 (42.9%)

"ATmega644P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   2 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   3 cbi   :  23 cbr   :   0 
clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :   3 cls   :   0 
clt   :   3 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :   7 cpse  :   0 dec   :  12 eor   :   2 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   5 jmp   :   2 
ld    :   1 ldd   :   0 ldi   :  71 lds   :   8 lpm   :   1 lsl   :   0 
lsr   :   1 mov   :  11 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  17 or    :   0 ori   :   6 out   :   9 pop   :  28 
push  :  28 rcall :  47 ret   :  18 reti  :   1 rjmp  :  10 rol   :   0 
ror   :   4 sbc   :   0 sbci  :   0 sbi   :  28 sbic  :   2 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   8 sbrs  :   0 sec   :   1 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   4 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   7 
sub   :   0 subi  :   4 swap  :   0 tst   :   2 wdr   :   0 
Instructions used: 45 out of 113 (39.8%)

"ATmega644P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003cc    864     20    884   65536   1.3%
[.dseg] 0x000100 0x000109      0      9      9    4096   0.2%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 1 warnings
